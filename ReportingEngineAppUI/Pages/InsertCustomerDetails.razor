@page "/insertcustomerdetails"
@using ReportingEngineLibrary.Data;
@using ReportingEngineLibrary.Models;
@using ReportingEngineLibrary;

<h4>Insert Customer Details</h4>
<EditForm Model="InsertCustomerDetailsModel" OnSubmit="Submit">
    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText id="firstName" 
            @bind-Value="InsertCustomerDetailsModel.FirstName" 
            class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText id="lastName"
        @bind-Value="InsertCustomerDetailsModel.LastName"
                   class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="customerDateOfBirth">Date of Birth</label>
        <InputDate id="customerDateOfBirth" 
            @bind-Value="InsertCustomerDetailsModel.DateOfBirth" 
            class="form-control"></InputDate>
    </div>
    <div class="form-group">
        <label for="address">Address</label>
        <InputText id="address" @bind-Value="InsertCustomerDetailsModel.Address" 
        class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="zipCode">ZipCode</label>
        <InputText id="zipCode" @bind-Value="InsertCustomerDetailsModel.ZipCode"
                   class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="state">State</label>
        <InputText id="state" @bind-Value="InsertCustomerDetailsModel.State"
                   class="form-control"></InputText>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<h4>Insert Bogus Data</h4>
<div class="form-group">
    <label for="state">Number Of Records</label>
    <input type="number" @bind-value="NumberOfRecords" />
    <button type="button" @onclick="GenerateBogusData" class="btn btn-primary">Generate Bogus Data</button>
    <button type="submit" @onclick="SaveBogusData" class="btn btn-primary">Save</button>
    @if(IsBogusRecordsBeingInserted)
    {
        <p>Bogus Records Inserted: @BogusRecordsInserted</p>
    }
</div>

@if(BogusData?.Count > 0)
{
    <p>Bogus Records Count: @BogusData?.Count</p>
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Date Of Birth</th>
                <th>Address</th>
                <th>Zip Code</th>
                <th>State</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var bogusData in BogusData)
            {
                <tr>
                    <td>@bogusData.FirstName</td>
                    <td>@bogusData.LastName</td>
                    <td>@bogusData.DateOfBirth</td>
                    <td>@bogusData.Address</td>
                    <td>@bogusData.ZipCode</td>
                    <td>@bogusData.State</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    public ISqlDataAccess? _sqlDataAccess { get; set; }
    public InsertCustomerDetailsModel InsertCustomerDetailsModel { get; set; } = new();
    public List<InsertCustomerDetailsModel> BogusData { get; set; } = new();
    public int NumberOfRecords { get; set; } = 1000;
    public int BogusRecordsInserted { get; set; } = 0;
    public bool IsBogusRecordsBeingInserted { get; set; } = false;



    private async Task Submit()
    {
        await _sqlDataAccess!.InsertCustomerDetails(InsertCustomerDetailsModel);
    }

    private async Task SaveBogusData()
    {
        if(BogusData?.Count > 0)
        {
            IsBogusRecordsBeingInserted = true;
            StateHasChanged();
            BogusRecordsInserted = 0;
            foreach(var bogusData in BogusData)
            {
                await _sqlDataAccess!.InsertCustomerDetails(bogusData);
                BogusRecordsInserted++;
            }
        }
        IsBogusRecordsBeingInserted = false;
        StateHasChanged();
    }

    private void GenerateBogusData()
    {
        BogusData = new();
        BogusData = new GenerateBogusData().GetBogusData(NumberOfRecords);
    }

}
